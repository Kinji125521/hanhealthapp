{"version":3,"file":"static/js/221.b8bb0717.chunk.js","mappings":"8YAaQA,EAAWC,EAAAA,EAAAA,OACXC,EAAgBC,EAAAA,EAAAA,YAoPxB,GAAeC,EAAAA,EAAAA,KAlPC,WAed,IAAQC,GAAiBC,EAAAA,EAAAA,KAAjBD,aAGR,GAAsCE,EAAAA,EAAAA,UAAS,CAC7CC,KAAM,GACNC,MAAO,IACP,eAHKC,EAAW,KAAEC,EAAc,KAKlC,GAA4BJ,EAAAA,EAAAA,UAAS,CACnCK,KAAM,EACNC,SAAU,KACV,eAHKC,EAAM,KAAEC,EAAS,MAWxBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,yCAAG,+GACGC,EAAAA,GAAAA,IAAS,eAAgB,CAAEJ,OAAAA,IAAS,OAAhDK,EAAG,OACTC,QAAQC,IAAIF,GAAI,EACiBA,EAAIG,KAA7BC,EAAO,EAAPA,QAASC,EAAW,EAAXA,YACjBb,EAAe,CACbH,KAAMe,EACNd,MAAOe,IACP,2CACH,kBARa,mCASdP,GACF,GAAG,CAACH,IAGJ,IAsCMW,EAAU,yCAAG,WAAOH,GAAI,sEACX,OAAjBF,QAAQC,IAAIC,GAAK,SACXJ,EAAAA,GAAAA,OAAY,gBAAD,OAAiBI,EAAKI,KAAK,OAE5CX,GAAU,kBACLD,GAAM,IACTF,KAAM,KACN,2CACH,gBARe,sCAWVe,GAAWC,EAAAA,EAAAA,MAKXC,EAAU,CACd,CACEC,MAAO,eACPC,UAAW,QACXC,MAAO,IACPC,OAAQ,SAAAC,GACN,OAAO,gBAAKC,IAAKD,EAAME,OAAO,I,qnPAAcJ,MAAO,GAAIK,OAAQ,GAAIC,IAAI,IACzE,GAEF,CACER,MAAO,eACPC,UAAW,QACXC,MAAO,KAET,CACEF,MAAO,eACPC,UAAW,SACXE,OAAQ,SAAAX,GAAI,OA1CMiB,EA0CWjB,EAzCjB,CACZ,GAAG,SAAC,IAAG,CAACkB,MAAM,MAAK,sCACnB,GAAG,SAAC,IAAG,CAACA,MAAM,QAAO,uCAEVD,GALM,IAACA,CA0CgB,GAEpC,CACET,MAAO,2BACPC,UAAW,WAEb,CACED,MAAO,qBACPC,UAAW,cAEb,CACED,MAAO,qBACPC,UAAW,iBAEb,CACED,MAAO,qBACPC,UAAW,cAEb,CACED,MAAO,eACPG,OAAQ,SAAAX,GACN,OACE,UAAC,IAAK,CAACmB,KAAK,SAAQ,WAClB,SAAC,KAAM,CACLF,KAAK,UACLG,MAAM,SACNC,MAAM,SAACC,EAAA,EAAY,IACnBC,QAAS,kBAhDH,SAACvB,GACjBK,EAAS,eAAD,OAAgBL,EAAKI,IAC/B,CA8C2BoB,CAAUxB,EAAK,KAEhC,SAAC,IAAU,CACTQ,MAAM,0DACNiB,UAAW,kBAAMtB,EAAWH,EAAK,EACjC0B,OAAO,eACPC,WAAW,eAAI,UAEf,SAAC,KAAM,CACLV,KAAK,UACLW,QAAM,EACNR,MAAM,SACNC,MAAM,SAACQ,EAAA,EAAc,UAK/B,EACAC,MAAO,UAIX,OACE,4BAEE,SAAC,IAAI,CACHtB,OACE,UAAC,IAAU,CAACuB,UAAU,IAAG,WACvB,SAAC,SAAe,WACd,SAAC,KAAI,CAACC,GAAG,IAAG,6BAEd,SAAC,SAAe,0CAGpBC,MAAO,CAAEC,aAAc,IAAK,UAE5B,UAAC,IAAI,CACHC,SAvIS,SAACC,GAChBtC,QAAQC,IAAIqC,GACZ,IAAQC,EAA6BD,EAA7BC,WAAYC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OAEpBC,EAAU,CAAC,GACD,IAAZD,IACFC,EAAQD,OAASA,GAEfF,IACFG,EAAQH,WAAaA,GAEnBC,IACFE,EAAQC,cAAgBH,EAAK,GAAGI,OAAO,cACvCF,EAAQG,YAAcL,EAAK,GAAGI,OAAO,eAGvCjD,GAAU,kBACLD,GACAgD,GAEP,EAoHQI,cAAe,CAAEL,QAAS,GAAI,WAC9B,SAAC,SAAS,CAACM,MAAM,eAAKC,KAAK,SAAQ,UACjC,UAAC,WAAW,YACV,SAAC,KAAK,CAACC,OAAQ,EAAE,2BACjB,SAAC,KAAK,CAACA,MAAO,EAAE,2BAChB,SAAC,KAAK,CAACA,MAAO,EAAE,iCAChB,SAAC,KAAK,CAACA,MAAO,EAAE,uCAChB,SAAC,KAAK,CAACA,MAAO,EAAE,4CAIpB,SAAC,SAAS,CAACF,MAAM,eAAKC,KAAK,aAAY,UACrC,SAAC,IAAM,CACLE,YAAY,6CAEZf,MAAO,CAAEvB,MAAO,KAAM,SAErB3B,EAAakE,YAAYC,KAAI,SAAAC,GAAO,OACnC,SAACzE,EAAM,CAELqE,MAAOI,EAAQ/C,GAAG,SACjB+C,EAAQL,MAFJK,EAAQ/C,GAGN,SAKf,SAAC,SAAS,CAACyC,MAAM,eAAKC,KAAK,OAAM,UAE/B,SAAClE,EAAW,CAACwE,OAAQA,EAAAA,OAGvB,SAAC,SAAS,WACR,SAAC,KAAM,CAACnC,KAAK,UAAUoC,SAAS,SAASpB,MAAO,CAAEqB,WAAY,IAAK,kCAOzE,SAAC,IAAI,CAAC9C,MAAK,uEAAgBpB,EAAYD,MAAK,6BAAQ,UAClD,SAAC,IAAK,CACJoE,OAAO,KACPhD,QAASA,EACTiD,WAAYpE,EAAYF,KACxBuE,WAAY,CACVC,SAAUlE,EAAOD,SACjBoE,MAAOvE,EAAYD,MACnByE,SAlKS,SAACtE,GAClBG,GAAU,kBACLD,GAAM,IACTF,KAAAA,IAEJ,EA8JUuE,QAASrE,EAAOF,MAElBwE,UAAQ,QAKlB,G,oJCzPMC,GAAU,QAEd,aAAe,IAAD,4BADdC,OAAQC,EAAAA,EAAAA,OAAc,GAAE,KAKxBC,MAAK,yCAAG,8FAAgB,OAAP9D,EAAE,EAAFA,GAAI+D,EAAG,EAAHA,IAAG,SAEJC,EAAAA,EAAAA,KAAW,qCAAsC,CACjEhE,GAAAA,EACA+D,IAAAA,IACA,OAHItE,EAAG,OAKT,EAAKmE,MAAQnE,EAAIG,KAAKgE,OAEtBK,EAAAA,EAAAA,IAAS,EAAKL,OAAM,2CACrB,mDAVI,GAUJ,KAEDM,OAAS,WACP,EAAKN,MAAQ,IACbO,EAAAA,EAAAA,KACF,GAjBEC,EAAAA,EAAAA,IAAmBC,KACrB,IAmBF,IC1BMC,G,SAAS,QAEb,aAAe,IAAD,4BADdC,SAAW,CAAC,EAAC,KAKbC,YAAW,yCAAG,0FAAY,SAAHT,IAAG,SAENC,EAAAA,EAAAA,IAAU,4CAA2C,OAAjEvE,EAAG,OACT,EAAK8E,SAAW9E,EAAIG,KAAI,2CACzB,mDAJU,IAHTwE,EAAAA,EAAAA,IAAmBC,KACrB,KASF,ICHA,GAbkB,QAEhB,aAAe,IAAD,4BADdxB,YAAc,GAAE,KAMhB4B,iBAAe,uBAAG,yGACEjF,EAAAA,GAAAA,IAAS,aAAY,OAAjCC,EAAG,OACT,EAAKoD,YAAcpD,EAAIG,KAAK8E,SAAQ,4CANpCN,EAAAA,EAAAA,IAAmBC,KACrB,ICcIM,EAAY,KAZH,QACb,cAAe,eACbN,KAAKO,WAAa,IAAIjB,EACtBU,KAAKQ,UAAY,IAAIP,EACrBD,KAAK1F,aAAe,IAAImG,CAE1B,KAOIC,EAAUC,IAAAA,cAAoBL,GAE9B/F,EAAW,WAAH,OAASoG,IAAAA,WAAiBD,EAAQ,C","sources":["pages/Article/index.js","store/login.Store.js","store/user.Store.js","store/channel.Store.js","store/index.js"],"sourcesContent":["import { Link, useNavigate } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Popconfirm, Table, Tag, Space, Card, Breadcrumb, Form, Button, Radio, DatePicker, Select } from 'antd'\r\n\r\nimport locale from 'antd/es/date-picker/locale/zh_TW'\r\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons'\r\n\r\nimport img404 from '@/assets/error.png'\r\nimport './index.scss'\r\nimport { useState, useEffect } from 'react'\r\nimport { http } from '@/utils'\r\nimport { useStore } from '@/store'\r\n\r\nconst { Option } = Select\r\nconst { RangePicker } = DatePicker\r\n\r\nconst Article = () => {\r\n  /*// 頻道列表管理\r\n  const [channelList, setChannelList] = useState([])\r\n\r\n  // 注意!!\r\n  // useEffect 的依賴非常重要，非常容易出現循環執行\r\n  // 在裡面寫了引起組件重新渲染的邏輯，重新渲染又會導致 useEffect 執行\r\n  useEffect(() => {\r\n    const loadChannelList = async () => {\r\n      const res = await http.get('/channels')\r\n      setChannelList(res.data.channels)\r\n    }\r\n    loadChannelList()\r\n  }, [])*/\r\n\r\n  const { channelStore } = useStore()\r\n\r\n  // 文章列表管理 統一管理數據 將來修改給 setList 傳對象\r\n  const [articleData, setarticleData] = useState({\r\n    list: [], // 文章列表\r\n    count: 0  // 文章數量\r\n  })\r\n\r\n  const [params, setParams] = useState({\r\n    page: 1,\r\n    per_page: 10\r\n  })\r\n\r\n  // 如果異步請求函數需要依賴一些數據的變化而重新執行\r\n  // 推薦把它寫到內部\r\n  // 統一不抽離函數到外面，只要涉及到異步請求的函數，都放到 useEffect 內部\r\n  // 本質區別：寫到外面每次組件更新都會重新進行函數初始化，這本身就是一次性能消耗\r\n  // 而寫到 useEffect 中，只會在依賴項發生變化的時候，函數才會進行重新初始化，可避免性能損失\r\n\r\n  useEffect(() => {\r\n    const loadList = async () => {\r\n      const res = await http.get('/mp/articles', { params })\r\n      console.log(res)\r\n      const { results, total_count } = res.data\r\n      setarticleData({\r\n        list: results,\r\n        count: total_count\r\n      })\r\n    }\r\n    loadList()\r\n  }, [params])\r\n\r\n  /* 表單篩選功能實現 */\r\n  const onFinish = (values) => {\r\n    console.log(values)\r\n    const { channel_id, date, status } = values\r\n    // 數據處理\r\n    const _params = {}\r\n    if (status !== -1) {\r\n      _params.status = status\r\n    }\r\n    if (channel_id) {\r\n      _params.channel_id = channel_id\r\n    }\r\n    if (date) {\r\n      _params.begin_pubdate = date[0].format('YYYY-MM-DD')\r\n      _params.end_pubdate = date[1].format('YYYY-MM-DD')\r\n    }\r\n    // 修改 params 數據，引起接口的重新發送，對象的合併是一個整體的覆蓋，改變了對象的整體引用\r\n    setParams({\r\n      ...params,\r\n      ..._params\r\n    })\r\n  }\r\n\r\n  const pageChange = (page) => {\r\n    setParams({\r\n      ...params,\r\n      page\r\n    })\r\n  }\r\n\r\n  const formatStatus = (type) => {\r\n    const TYPES = {\r\n      1: <Tag color=\"red\">審核失敗</Tag>,\r\n      2: <Tag color=\"green\">審核成功</Tag>\r\n    }\r\n    return TYPES[type]\r\n  }\r\n\r\n  // 刪除\r\n  const delArticle = async (data) => {\r\n    console.log(data)\r\n    await http.delete(`/mp/articles/${data.id}`)\r\n    // 刷新一下列表\r\n    setParams({\r\n      ...params,\r\n      page: 1\r\n    })\r\n  }\r\n\r\n  // 編輯\r\n  const navigate = useNavigate()\r\n  const goPublish = (data) => {\r\n    navigate(`/publish?id=${data.id}`)\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: '封面',\r\n      dataIndex: 'cover',\r\n      width: 120,\r\n      render: cover => {\r\n        return <img src={cover.images[0] || img404} width={80} height={60} alt=\"\" />\r\n      }\r\n    },\r\n    {\r\n      title: '標題',\r\n      dataIndex: 'title',\r\n      width: 220\r\n    },\r\n    {\r\n      title: '狀態',\r\n      dataIndex: 'status',\r\n      render: data => formatStatus(data)\r\n    },\r\n    {\r\n      title: '發布時間',\r\n      dataIndex: 'pubdate'\r\n    },\r\n    {\r\n      title: '閱讀數',\r\n      dataIndex: 'read_count'\r\n    },\r\n    {\r\n      title: '評論數',\r\n      dataIndex: 'comment_count'\r\n    },\r\n    {\r\n      title: '點讚數',\r\n      dataIndex: 'like_count'\r\n    },\r\n    {\r\n      title: '操作',\r\n      render: data => {\r\n        return (\r\n          <Space size=\"middle\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"circle\"\r\n              icon={<EditOutlined />}\r\n              onClick={() => goPublish(data)}\r\n            />\r\n            <Popconfirm\r\n              title=\"確定要刪除此文章嗎?\"\r\n              onConfirm={() => delArticle(data)}\r\n              okText=\"確定\"\r\n              cancelText=\"取消\"\r\n            >\r\n              <Button\r\n                type=\"primary\"\r\n                danger\r\n                shape=\"circle\"\r\n                icon={<DeleteOutlined />}\r\n              />\r\n            </Popconfirm>\r\n          </Space>\r\n        )\r\n      },\r\n      fixed: 'right'\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <div>\r\n      {/* 篩選區域 */}\r\n      <Card\r\n        title={\r\n          <Breadcrumb separator=\">\">\r\n            <Breadcrumb.Item>\r\n              <Link to=\"/\">首頁</Link>\r\n            </Breadcrumb.Item>\r\n            <Breadcrumb.Item>內容管理</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n        }\r\n        style={{ marginBottom: 20 }}\r\n      >\r\n        <Form\r\n          onFinish={onFinish}\r\n          initialValues={{ status: -1 }}>\r\n          <Form.Item label=\"狀態\" name=\"status\">\r\n            <Radio.Group>\r\n              <Radio value={-1}>全部</Radio>\r\n              <Radio value={0}>草稿</Radio>\r\n              <Radio value={1}>待審核</Radio>\r\n              <Radio value={2}>審核通過</Radio>\r\n              <Radio value={3}>審核失敗</Radio>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"頻道\" name=\"channel_id\">\r\n            <Select\r\n              placeholder=\"請選擇文章頻道\"\r\n              //defaultValue=\"\"\r\n              style={{ width: 200 }}\r\n            >\r\n              {channelStore.channelList.map(channel => (\r\n                <Option\r\n                  key={channel.id}\r\n                  value={channel.id}>\r\n                  {channel.name}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"日期\" name=\"date\">\r\n            {/* 传入locale属性 控制中文显示*/}\r\n            <RangePicker locale={locale}></RangePicker>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 80 }}>\r\n              篩選\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Card>\r\n      {/* 文章列表區域 */}\r\n      <Card title={`根據篩選條件共查詢到 ${articleData.count} 調結果：`}>\r\n        <Table\r\n          rowKey=\"id\"\r\n          columns={columns}\r\n          dataSource={articleData.list}\r\n          pagination={{\r\n            pageSize: params.per_page,\r\n            total: articleData.count,\r\n            onChange: pageChange,\r\n            current: params.page\r\n          }}\r\n          bordered\r\n        />\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(Article)","// login module\r\nimport { makeAutoObservable } from 'mobx'\r\nimport { http, setToken, getToken, removeToken, saveUser, getUser, removeUser } from '@/utils'\r\n//import app from './server'\r\nimport axios from 'axios'\r\n\r\n\r\nclass LoginStore {\r\n  token = getToken() || ''\r\n  constructor() {\r\n    // 響應式\r\n    makeAutoObservable(this)\r\n  }\r\n  login = async ({ id, tel }) => {\r\n    // 調用登入接口\r\n    const res = await axios.post('https://192.168.11.118:7000/signin', {\r\n      id,\r\n      tel\r\n    })\r\n    // 存入 token\r\n    this.token = res.data.token\r\n    // 存入 ls\r\n    setToken(this.token)\r\n  }\r\n  // 退出登入\r\n  logOut = () => {\r\n    this.token = ''\r\n    removeToken()\r\n  }\r\n}\r\n\r\nexport default LoginStore","import { makeAutoObservable } from 'mobx'\r\nimport { http } from '@/utils'\r\nimport { getUser } from '@/utils/storageUtils'\r\nimport axios from 'axios'\r\n\r\nclass UserStore {\r\n  userInfo = {}\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  getUserInfo = async ({ tel }) => {\r\n    // 調用接口獲取數據\r\n    const res = await axios.get(`https://192.168.11.118:7000/user/profile`)\r\n    this.userInfo = res.data\r\n  }\r\n}\r\n\r\nexport default UserStore","import { makeAutoObservable } from 'mobx'\r\nimport { http } from '@/utils'\r\nclass ChannelStore {\r\n  channelList = []\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  // article / publish 哪邊調用這個函數呢\r\n  loadChannelList = async () => {\r\n    const res = await http.get('/channels')\r\n    this.channelList = res.data.channels\r\n  }\r\n}\r\n\r\nexport default ChannelStore","// 把所有的模組做統一處理\r\n// 導出一個統一的方法 useStore\r\n\r\nimport React from \"react\"\r\nimport LoginStore from \"./login.Store\"\r\nimport UserStore from \"./user.Store\"\r\nimport ChannelStore from \"./channel.Store\"\r\n\r\nclass RootStore {\r\n  constructor() {\r\n    this.loginStore = new LoginStore()\r\n    this.userStore = new UserStore()\r\n    this.channelStore = new ChannelStore()\r\n    // ... 每新建立的不同功能的 Store，就必須在此新增一個實例，來進行集中管理\r\n  }\r\n}\r\n\r\n// 實例化根\r\n// 導出 useStore context\r\n\r\nconst rootStore = new RootStore()\r\nconst context = React.createContext(rootStore)\r\n\r\nconst useStore = () => React.useContext(context)\r\n\r\nexport { useStore }"],"names":["Option","Select","RangePicker","DatePicker","observer","channelStore","useStore","useState","list","count","articleData","setarticleData","page","per_page","params","setParams","useEffect","loadList","http","res","console","log","data","results","total_count","delArticle","id","navigate","useNavigate","columns","title","dataIndex","width","render","cover","src","images","height","alt","type","color","size","shape","icon","EditOutlined","onClick","goPublish","onConfirm","okText","cancelText","danger","DeleteOutlined","fixed","separator","to","style","marginBottom","onFinish","values","channel_id","date","status","_params","begin_pubdate","format","end_pubdate","initialValues","label","name","value","placeholder","channelList","map","channel","locale","htmlType","marginLeft","rowKey","dataSource","pagination","pageSize","total","onChange","current","bordered","LoginStore","token","getToken","login","tel","axios","setToken","logOut","removeToken","makeAutoObservable","this","UserStore","userInfo","getUserInfo","loadChannelList","channels","rootStore","loginStore","userStore","ChannelStore","context","React"],"sourceRoot":""}